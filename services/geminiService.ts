import { GoogleGenAI, Modality } from "@google/genai";
import { type Avatar, type ClothingItem, ClothingCategory } from '../types';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const fileToGenerativePart = async (imageDataUrl: string) => {
    const base64Data = imageDataUrl.split(',')[1];
    const mimeType = imageDataUrl.match(/data:(.*);base64,/)?.[1] ?? 'image/png';
    return {
      inlineData: {
        data: base64Data,
        mimeType,
      },
    };
};


export const geminiService = {
    createFullBodyAvatar: async (sourceImageDataUrl: string): Promise<string> => {
        try {
            const imagePart = await fileToGenerativePart(sourceImageDataUrl);
            const prompt = `From the provided image of a person, create a photorealistic, full-body image of them. The person should be standing still in a neutral, forward-facing pose, as if for a virtual clothing fitting. Place them against a simple, well-lit, light-gray studio background. Ensure the entire body from head to toe is visible. The final image should be just the person on the background, without any additional text, logos, or objects. The final image must be a square (1:1 aspect ratio).`;
            
            const parts = [imagePart, { text: prompt }];

            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash-image',
                contents: { parts },
                config: {
                    responseModalities: [Modality.IMAGE],
                },
            });

            const firstPart = response.candidates?.[0]?.content?.parts?.[0];
            if (firstPart && firstPart.inlineData) {
                const base64ImageBytes: string = firstPart.inlineData.data;
                const mimeType = firstPart.inlineData.mimeType;
                return `data:${mimeType};base64,${base64ImageBytes}`;
            }

            throw new Error("No avatar image was generated by the API.");
        } catch (error) {
            console.error("Error creating full body avatar with Gemini:", error);
            throw new Error("Failed to generate avatar. Please check the uploaded image and your API key, then try again.");
        }
    },

    generateOutfitImage: async (
        avatar: Avatar,
        outfitItems: Partial<Record<ClothingCategory, ClothingItem>>
    ): Promise<string> => {
        try {
            const parts: any[] = [];
            
            // Add avatar image (this will be image #1)
            parts.push(await fileToGenerativePart(avatar.imageDataUrl));

            // Create a stable, ordered list of clothing items to process
            const clothingItems = Object.values(outfitItems).filter(
                (item): item is ClothingItem => !!item
            );

            // Add clothing images (these will be images #2, #3, etc.)
            for (const item of clothingItems) {
                parts.push(await fileToGenerativePart(item.imageDataUrl));
            }
            
            const clothingInstructions = clothingItems
                .map((item, index) => {
                    const imageIndex = index + 2; // Image #1 is the avatar
                    const descriptionText = item.description 
                        ? ` The item is described as: "${item.description}".`
                        : '';

                    return `- **${item.category} ('${item.name}')**: Take this item from image #${imageIndex}.${descriptionText}`;
                })
                .join('\n');

            const prompt = `Your single most important task is to edit image #1, which contains the main person (the model). You will take ONLY the clothing item from the other images (image #2, #3, etc.) and place it realistically onto the person in image #1.

**Golden Rule:**
- **The person in image #1 is the ONLY person that should appear in the final image.** Their body, face, hair, skin tone, and pose MUST be preserved perfectly.
- **The people in the other images (image #2, etc.) are only there to show the clothing.** IGNORE these people completely. Do NOT use their bodies, faces, or features.

**Instructions:**
For each clothing item listed below, follow these steps:
1.  Locate the clothing item in its corresponding image (e.g., the shirt in image #2).
2.  Digitally "cut out" this clothing item from its original context.
3.  Place this item onto the person in image #1, replacing what they are currently wearing in that clothing category.
4.  Ensure the new item fits naturally, adapting to the pose and body shape of the person in image #1.
5.  Retain any clothing on the person from image #1 that is NOT being replaced.

**Items to Change:**
${clothingInstructions}

**Final Output requirements:**
- The result must be a photorealistic, seamlessly edited image.
- The background from image #1 must be preserved.
- The output image must be a square (1:1 aspect ratio).
- Do not add any text, logos, or other artifacts.`;
            
            parts.push({ text: prompt });

            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash-image',
                contents: { parts },
                config: {
                    responseModalities: [Modality.IMAGE],
                },
            });

            const firstPart = response.candidates?.[0]?.content?.parts?.[0];
            if (firstPart && firstPart.inlineData) {
                const base64ImageBytes: string = firstPart.inlineData.data;
                const mimeType = firstPart.inlineData.mimeType;
                return `data:${mimeType};base64,${base64ImageBytes}`;
            }

            throw new Error("No image was generated by the API.");
        } catch (error) {
            console.error("Error generating outfit image with Gemini:", error);
            throw new Error("Failed to generate outfit. Please check your API key and try again.");
        }
    },

    extractAndCleanClothingItem: async (
        sourceImageDataUrl: string,
        category: ClothingCategory,
        userDescription: string
    ): Promise<string> => {
        try {
            const imagePart = await fileToGenerativePart(sourceImageDataUrl);
            const descriptionPrompt = userDescription 
                ? `The user provided this description to help identify it: "${userDescription}".` 
                : 'Use the category name as the primary guide.';

            const prompt = `From the provided image, isolate the single clothing item that corresponds to the '${category}' category. ${descriptionPrompt}
Generate a new, photorealistic image of ONLY that item.
The item should be laid out flat or on an invisible mannequin, ready for a product catalog.
Place it against a solid, plain, light-gray background to ensure high contrast.
The final image must be clean, well-lit, and contain no other objects, text, or distracting shadows.
The final image must be a square (1:1 aspect ratio).`;

            const parts = [imagePart, { text: prompt }];

            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash-image',
                contents: { parts },
                config: {
                    responseModalities: [Modality.IMAGE],
                },
            });

            const firstPart = response.candidates?.[0]?.content?.parts?.[0];
            if (firstPart && firstPart.inlineData) {
                const base64ImageBytes: string = firstPart.inlineData.data;
                const mimeType = firstPart.inlineData.mimeType;
                return `data:${mimeType};base64,${base64ImageBytes}`;
            }

            throw new Error("No clothing item was generated by the API.");
        } catch (error) {
            console.error("Error cleaning clothing item:", error);
            throw new Error("Failed to process clothing item. The AI could not isolate the item from the background.");
        }
    }
};